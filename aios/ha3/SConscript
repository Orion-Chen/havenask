


# -*- mode: python -*-

# Inherit the environment from my parent.
Import('env')
import os
import copy
import time
import getpass
import subprocess


def shell_code(cmd, cwd=None):
    p = subprocess.Popen(cmd, shell=True, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    rc = p.returncode
    return rc, out, err


def aSync(env, target, source):
    cmd_tpl = 'rsync -azi --delete "{source}" `python -c "import os; print os.path.dirname(\'{target}\')"`'
    copy = env.Command(target, source, cmd_tpl.format(source='$SOURCE', target='$TARGET'))
    # run to detect changes
    tgt_path = copy[0].get_abspath()
    src_path = copy[0].sources[0].get_abspath()
    cmd = cmd_tpl.format(source=src_path, target=tgt_path) + ' --dry-run'
    rc, out, err = shell_code(cmd)
    if out.strip():
        env.AlwaysBuild(copy)
    return copy
env.__class__.aSync = aSync


# Make a copy of the environment, so my changes are limited in this directory and sub-directories.
env = env.Clone()

print "build_dir:",env['RELATIVE_BUILD_DIR']
print "top_dir:",env['TOP_DIR']
env.Append(ACSUBST = {'BUILDDIR': env['RELATIVE_BUILD_DIR']})
env.Append(ACSUBST = {'TOP_BUILDDIR': env['RELATIVE_BUILD_DIR']})
env.Append(ACSUBST = {'TOP_SRCDIR': env['TOP_DIR']})
env.Append(ACSUBST = {'abs_top_srcdir': env['TOP_DIR']})
env.Append(ACSUBST = {'VERSION': env['version']})
env.Append(ACSUBST = {'INSTALL_ROOT': env['install_root']})

#modify aliws conf for ut
if env['build_signature'] == 'yes':
    ha_build_signature = "ha_build_signature:"
    ha_build_signature += " " + env['version']
    ha_build_signature += " " + time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime())
    ha_build_signature += " " + getpass.getuser()
else:
    ha_build_signature = 'test'

env.AppendUnique(LIBPATH= env['install_root'] + '/home/admin/eagleeye-core/lib/')
env.AppendUnique(LIBPATH= env['install_root'] + '/home/admin/diamond-client4cpp/lib/')
env.AppendUnique(LIBPATH= env['install_root'] + '/home/admin/sap/lib64/')
env.Append(CPPPATH=[env['install_root'] + '/home/admin/sap/include/'])  # nvml.h
env.Append(CPPPATH=env['install_root'] + '/usr/local/include/eigen3/')

proto_lib_path_src = os.path.join(env['install_root'], 'usr/local/lib/python2.7/site-packages/google')
proto_lib_path_dst = os.path.join(env['install_root'], 'usr/local/lib/python/site-packages/google')
if os.path.exists(proto_lib_path_src) and not os.path.exists(proto_lib_path_dst):
    os.system("cp -rf %s %s" % (proto_lib_path_src, proto_lib_path_dst))

env.PrependENVPath('LSAN_OPTIONS', "suppressions=" + env['TOP_DIR'] + '/leak_suppressions')

if env['use_fpga'] == 'yes':
    env.Append(CPPDEFINES=['USE_FPGA=1'])

env.Append(ACSUBST = {'HA_BUILD_SIGNATURE': ha_build_signature})

ha_protocol_version = "ha3-protocol-3.0"
env.Append(ACSUBST = {'HA_PROTOCOL_VERSION': ha_protocol_version})

env.aACSubst(target = ['ha3/version.h'],
             source = ['ha3/version.h.in'])
env.aACSubst(target = ['ha3/test/test.h'],
             source = ['ha3/test/test.h.in'])
env['test_conf_depend'] = [
    env.aACSubst(target = ['testdata/conf/plugin.conf'],
                 source = ['testdata/conf/plugin.conf.in']),
    env.aACSubst(target = ['testdata/conf/rankprofile.conf'],
                 source = ['testdata/conf/rankprofile.conf.in']),
    env.aACSubst(target = ['testdata/conf/qrs_plugin.conf'],
                 source = ['testdata/conf/qrs_plugin.conf.in']),
    env.aACSubst(target = ['testdata/conf/qrs_chain.conf'],
                 source = ['testdata/conf/qrs_chain.conf.in']),
    env.aACSubst(target = ['testdata/configuration/qrs.json'],
                 source = ['testdata/configuration/qrs.json.in']),
]

# modify by youhe.chen
env.Append(CPPPATH=['/ha3_depends/usr/local/include/','/ha3_depends/usr/include/',env['TOP_DIR']+'/../indexlib/',env['TOP_DIR']+'/../build_service/','/ha3_depends/usr/local/include/eigen3/',env['TOP_DIR']+'/../build_service/build/release64/'])
env.Append(LIBPATH=['/ha3_depends/usr/local/lib64','/ha3_depends/usr/local/lib','/ha3_depends/usr/lib64/',env['TOP_DIR']+'/../indexlib/build/release64/lib/',env['TOP_DIR']+'/../build_service/build/release64/lib/'])
# ---

env.aDuplicate('testdata/configuration/schemas/auction_schema.json')
env.aDuplicate('testdata/configuration/service.json')

env.aCheckLibrary('pthread')
env.aCheckLibrary('z')
env.aCheckLibrary('dl')
env.aCheckLibrary('expat')
env.aCheckLibrary('alog')
env.aCheckLibrary('autil')
env.aCheckLibrary('beeper-framework')
env.aCheckLibrary('anet')
env.aCheckLibrary('protobuf')
env.aCheckLibrary('arpc')
env.aCheckLibrary('zookeeper_mt')
env.aCheckLibraryNotAutoAdd('swift_client_minimal')


if env['heapchecktype'] == 'tcmalloc':
    env.aCheckLibraryNotAutoAdd('tcmalloc')

if env['use_tcmalloc'] == 'yes':
    env.aCheckLibraryPrependLib('tcmalloc')

env.Append(LIBPATH=[env['JAVA_SDK_PATH'] + '/jre/lib/amd64/server'])
env.Append(CPPPATH=[env['JAVA_SDK_PATH'] + '/include'])
env.Append(CPPPATH=[env['JAVA_SDK_PATH'] + '/include/linux'])
env.AppendENVPath('LD_LIBRARY_PATH', env['JAVA_SDK_PATH'] + '/jre/lib/amd64/server')

# Test Library
env.aCheckLibraryPrependLib('mxml')
env.aCheckLibraryPrependLib('alog')
env.aCheckLibraryPrependLib('autil')
env.aCheckLibraryPrependLib('snappy')

loggerconf = env['TOP_DIR'] + '/ha3/test/ha3_alog.conf'
env.Append(ACSUBST = {'DOTEST_LOGGER_CONF': loggerconf})


env['all_ha3_libs'] = [
    'ha3_service',
    'ha3_worker',
    'ha3_func_expression',
    'ha3_qrs',
    'ha3_search',
    'ha3_summary',
    'ha3_rank',
    'ha3_sorter',
    'ha3_proxy',
    'ha3_cava',
    'ha3_index',
    'ha3_monitor',
    'ha3_common',
    'ha3_config',
    'ha3_queryparser',
    'ha3_proto',
    'ha3_util',
    'ha3_sql',
    'ha3_schema',
    'ha3_suez_turing_variant',
    'ha3_suez_turing_ops',
    'ha3_suez_turing_agg_ops',
    'ha3_suez_turing_sql_ops',
    'ha3_suez_turing_searcher',
    'ha3_suez_turing_qrs',
]

env['depend_static_libs'] =  env['all_ha3_libs']

env['depend_dynamic_libs'] = [
    'suez',
    'build_service',
    'indexlib',
    'turing_ops',
    'basic_variant',
    'iquan_jni',
    'iquan_common',
    'navi',
    'matchdoc',
    'swift_client_minimal',
    'cava',
    'hippo',
    'multi_call',
    'amonitor_client',
    'kmonitor_client',
    'kmonitor_adapter',
    'fslib-framework',
    'resource_reader',
    'cm_basic',
    'cm_sub',
    'sap_eagle',
    'eagleeye_core',
    'mid-diamond',
    'worker_framework',
    'http_arpc',
    'kvtracer',
    'autil',
    'arpc',
    'anet',
    'sap',
    'alog',
    'z',
    'dl',
    'xml2',
    'snappy',
    'lz4',
    'zstd',
    'protobuf',
    'pthread',
    'sap_eagle',
    'hiredis',
    'zookeeper_mt',
    'tensorflow_cc',
    'absl_strings',
    'suez_turing',
]


env['ha3_depend_libs'] = env['all_ha3_libs'] + env['depend_dynamic_libs']

env['ha3_test_depend_lib'] = env['ha3_depend_libs'] + [ 'fake_entry', 'unittest', 'gmock', 'gtest', 'ha3sdk_testlib', 'ha3_fakesearch']
# List my sub-directories.
env.aDirs('ha3')
#env.aDirs('cava')
env.aDirs('ha3_sdk')
env.aDirs('tools')
